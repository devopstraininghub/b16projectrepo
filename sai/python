This is new application python code 
please find below

Regards.
saikumar

# ecommerce_app.py
import sqlite3
from getpass import getpass
from datetime import datetime
import argparse
import sys

DB_NAME = "ecommerce.db"


class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DB_NAME)
        self.create_tables()

    def create_tables(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                password TEXT,
                created_at TEXT
            )
        ''')
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                price REAL,
                stock INTEGER
            )
        ''')
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                total REAL,
                created_at TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                order_id INTEGER,
                product_id INTEGER,
                quantity INTEGER,
                FOREIGN KEY(order_id) REFERENCES orders(id),
                FOREIGN KEY(product_id) REFERENCES products(id)
            )
        ''')

    def execute(self, query, params=()):
        cur = self.conn.cursor()
        cur.execute(query, params)
        self.conn.commit()
        return cur

    def close(self):
        self.conn.close()


class User:
    def __init__(self, db):
        self.db = db

    def register(self, username, password):
        try:
            self.db.execute("INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)",
                            (username, password, datetime.now().isoformat()))
            print("User registered successfully.")
        except sqlite3.IntegrityError:
            print("Username already exists.")

    def login(self, username, password):
        cur = self.db.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        user = cur.fetchone()
        if user:
            print("Login successful.")
            return user[0]  # user ID
        else:
            print("Invalid credentials.")
            return None


class Product:
    def __init__(self, db):
        self.db = db

    def add_product(self, name, description, price, stock):
        self.db.execute("INSERT INTO products (name, description, price, stock) VALUES (?, ?, ?, ?)",
                        (name, description, price, stock))
        print(f"Product '{name}' added.")

    def list_products(self):
        cur = self.db.execute("SELECT * FROM products")
        print("\n--- Available Products ---")
        for row in cur.fetchall():
            print(f"{row[0]}. {row[1]} - ${row[3]} ({row[4]} in stock)")
        print()

    def get_product(self, product_id):
        cur = self.db.execute("SELECT * FROM products WHERE id=?", (product_id,))
        return cur.fetchone()


class Cart:
    def __init__(self):
        self.items = []

    def add_item(self, product_id, quantity):
        self.items.append((product_id, quantity))
        print(f"Added product {product_id} (x{quantity}) to cart.")

    def view_cart(self, db):
        print("\n--- Your Cart ---")
        total = 0
        for product_id, qty in self.items:
            product = db.execute("SELECT * FROM products WHERE id=?", (product_id,)).fetchone()
            if product:
                print(f"{product[1]} - ${product[3]} x {qty} = ${product[3] * qty}")
                total += product[3] * qty
        print(f"Total: ${total}\n")
        return total

    def checkout(self, db, user_id):
        total = self.view_cart(db)
        db.execute("INSERT INTO orders (user_id, total, created_at) VALUES (?, ?, ?)",
                   (user_id, total, datetime.now().isoformat()))
        order_id = db.execute("SELECT last_insert_rowid()").fetchone()[0]
        for product_id, qty in self.items:
            db.execute("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)",
                       (order_id, product_id, qty))
            db.execute("UPDATE products SET stock = stock - ? WHERE id=?", (qty, product_id))
        print(f"Order placed. Order ID: {order_id}")
        self.items = []


def init_data(db):
    """Populate dummy data"""
    prod = Product(db)
    prod.add_product("Laptop", "15-inch display", 999.99, 10)
    prod.add_product("Smartphone", "Latest model", 799.49, 20)
    prod.add_product("Headphones", "Noise cancelling", 199.99, 30)
    prod.add_product("Mouse", "Wireless mouse", 49.99, 50)


def main():
    parser = argparse.ArgumentParser(description="CLI E-commerce App")
    parser.add_argument("--init", action="store_true", help="Initialize with sample data")
    args = parser.parse_args()

    db = Database()

    if args.init:
        init_data(db)

    user = User(db)
    product = Product(db)
    cart = Cart()
    current_user = None

    while True:
        if not current_user:
            print("1. Register\n2. Login\n0. Exit")
            choice = input("Choose: ")
            if choice == '1':
                username = input("Username: ")
                password = getpass("Password: ")
                user.register(username, password)
            elif choice == '2':
                username = input("Username: ")
                password = getpass("Password: ")
                current_user = user.login(username, password)
            elif choice == '0':
                break
        else:
            print("1. View Products\n2. Add to Cart\n3. View Cart\n4. Checkout\n5. Logout")
            choice = input("Choose: ")
            if choice == '1':
                product.list_products()
            elif choice == '2':
                pid = int(input("Product ID: "))
                qty = int(input("Quantity: "))
                cart.add_item(pid, qty)
            elif choice == '3':
                cart.view_cart(db)
            elif choice == '4':
                cart.checkout(db, current_user)
            elif choice == '5':
                current_user = None

    db.close()


if __name__ == "__main__":
    main()

