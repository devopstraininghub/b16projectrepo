This is the nodejs code to develope the ecommerce application 
regards
Saikumar

ecommerce-app/
├── config/
│   └── db.js
├── controllers/
│   └── authController.js
│   └── productController.js
│   └── orderController.js
├── models/
│   └── User.js
│   └── Product.js
│   └── Order.js
├── routes/
│   └── authRoutes.js
│   └── productRoutes.js
│   └── orderRoutes.js
├── middlewares/
│   └── authMiddleware.js
├── .env
├── server.js
├── package.json


npm init -y
npm install express mongoose dotenv bcryptjs jsonwebtoken cors


const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/auth', require('./routes/authRoutes'));
app.use('/api/products', require('./routes/productRoutes'));
app.use('/api/orders', require('./routes/orderRoutes'));

// Connect DB and start server
mongoose.connect(process.env.MONGO_URI)
    .then(() => {
        app.listen(5000, () => console.log('Server running on port 5000'));
    })
    .catch(err => console.log(err));


const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
    name: String,
    email: { type: String, unique: true },
    password: String,
    isAdmin: { type: Boolean, default: false }
});
module.exports = mongoose.model('User', userSchema);


const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

exports.register = async (req, res) => {
    try {
        const { name, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await User.create({ name, email, password: hashedPassword });
        res.json(user);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user || !(await bcrypt.compare(password, user.password)))
            return res.status(400).json({ msg: 'Invalid credentials' });

        const token = jwt.sign({ id: user._id, isAdmin: user.isAdmin }, process.env.JWT_SECRET);
        res.json({ token, user });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};


const router = require('express').Router();
const { register, login } = require('../controllers/authController');

router.post('/register', register);
router.post('/login', login);

module.exports = router;


const mongoose = require('mongoose');
const productSchema = new mongoose.Schema({
    title: String,
    description: String,
    price: Number,
    imageUrl: String,
    category: String,
    stock: Number
});
module.exports = mongoose.model('Product', productSchema);


const Product = require('../models/Product');

exports.createProduct = async (req, res) => {
    try {
        const product = await Product.create(req.body);
        res.json(product);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.getProducts = async (req, res) => {
    const products = await Product.find();
    res.json(products);
};


const router = require('express').Router();
const { createProduct, getProducts } = require('../controllers/productController');
const auth = require('../middlewares/authMiddleware');

router.get('/', getProducts);
router.post('/', auth, createProduct); // only logged-in users

module.exports = router;


const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
    const token = req.header('Authorization');
    if (!token) return res.status(401).json({ msg: 'No token, auth denied' });

    try {
        const verified = jwt.verify(token, process.env.JWT_SECRET);
        req.user = verified;
        next();
    } catch (err) {
        res.status(400).json({ msg: 'Token is not valid' });
    }
};



